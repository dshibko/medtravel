<?php

namespace DoctrineORMModule\Proxy\__CG__\Application\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Clients extends \Application\Entity\Clients implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'fio', 'service', 'diagnosis', 'contacts', 'dos', 'status', 'comments', 'country', 'contactType', 'attachments', 'clinic', 'doctor', 'conclusion', 'payment', 'dateAdded', 'manager', 'informed');
        }

        return array('__isInitialized__', 'id', 'fio', 'service', 'diagnosis', 'contacts', 'dos', 'status', 'comments', 'country', 'contactType', 'attachments', 'clinic', 'doctor', 'conclusion', 'payment', 'dateAdded', 'manager', 'informed');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Clients $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setFio($fio)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFio', array($fio));

        return parent::setFio($fio);
    }

    /**
     * {@inheritDoc}
     */
    public function getFio()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFio', array());

        return parent::getFio();
    }

    /**
     * {@inheritDoc}
     */
    public function setService(\Application\Entity\Service $service = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setService', array($service));

        return parent::setService($service);
    }

    /**
     * {@inheritDoc}
     */
    public function getService()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getService', array());

        return parent::getService();
    }

    /**
     * {@inheritDoc}
     */
    public function setDiagnosis($diagnosis)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDiagnosis', array($diagnosis));

        return parent::setDiagnosis($diagnosis);
    }

    /**
     * {@inheritDoc}
     */
    public function getDiagnosis()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDiagnosis', array());

        return parent::getDiagnosis();
    }

    /**
     * {@inheritDoc}
     */
    public function setContacts($contacts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContacts', array($contacts));

        return parent::setContacts($contacts);
    }

    /**
     * {@inheritDoc}
     */
    public function getContacts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContacts', array());

        return parent::getContacts();
    }

    /**
     * {@inheritDoc}
     */
    public function setDOS($dos)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDOS', array($dos));

        return parent::setDOS($dos);
    }

    /**
     * {@inheritDoc}
     */
    public function getDOS()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDOS', array());

        return parent::getDOS();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setComments($comments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setComments', array($comments));

        return parent::setComments($comments);
    }

    /**
     * {@inheritDoc}
     */
    public function getComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', array());

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountry($country)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountry', array($country));

        return parent::setCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountry', array());

        return parent::getCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function setContactType($contactType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContactType', array($contactType));

        return parent::setContactType($contactType);
    }

    /**
     * {@inheritDoc}
     */
    public function getContactType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContactType', array());

        return parent::getContactType();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttachments($attachments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttachments', array($attachments));

        return parent::setAttachments($attachments);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachments', array());

        return parent::getAttachments();
    }

    /**
     * {@inheritDoc}
     */
    public function setClinic(\Application\Entity\Clinic $clinic = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClinic', array($clinic));

        return parent::setClinic($clinic);
    }

    /**
     * {@inheritDoc}
     */
    public function getClinic()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClinic', array());

        return parent::getClinic();
    }

    /**
     * {@inheritDoc}
     */
    public function setDoctor(\Application\Entity\Doctor $doctor = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDoctor', array($doctor));

        return parent::setDoctor($doctor);
    }

    /**
     * {@inheritDoc}
     */
    public function getDoctor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDoctor', array());

        return parent::getDoctor();
    }

    /**
     * {@inheritDoc}
     */
    public function setConclusion($conclusion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConclusion', array($conclusion));

        return parent::setConclusion($conclusion);
    }

    /**
     * {@inheritDoc}
     */
    public function getConclusion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConclusion', array());

        return parent::getConclusion();
    }

    /**
     * {@inheritDoc}
     */
    public function setPayment($payment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPayment', array($payment));

        return parent::setPayment($payment);
    }

    /**
     * {@inheritDoc}
     */
    public function getPayment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPayment', array());

        return parent::getPayment();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateAdded($dateAdded)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateAdded', array($dateAdded));

        return parent::setDateAdded($dateAdded);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateAdded()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateAdded', array());

        return parent::getDateAdded();
    }

    /**
     * {@inheritDoc}
     */
    public function setManager(\Application\Entity\User $manager = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setManager', array($manager));

        return parent::setManager($manager);
    }

    /**
     * {@inheritDoc}
     */
    public function getManager()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getManager', array());

        return parent::getManager();
    }

    /**
     * {@inheritDoc}
     */
    public function setInformed($informed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInformed', array($informed));

        return parent::setInformed($informed);
    }

    /**
     * {@inheritDoc}
     */
    public function getInformed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInformed', array());

        return parent::getInformed();
    }

}
